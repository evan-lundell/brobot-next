@page "/secretsanta/{id:int}"
@inject ApiService ApiService
@inject IToastService ToastService

@if (_secretSantaGroup == null || _allUsers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>@_secretSantaGroup?.Name</h3>
    <div class="row my-3">
        <div class="col-xs-6 offset-md-6 offset-lg-8 col-md-3 col-lg-2">
            <button type="button" class="btn btn-primary" @onclick="AddUser">Add User</button>
        </div>
        <div class="col-xs-6 col-md-3 col-lg-2">
            <button type="button" class="btn btn-primary" @onclick="GeneratePairs">Generate Pairs</button>
        </div>
    </div>
    <RadzenDataGrid class="my-3" @ref="_grid" TItem="UserResponse" Data="@_secretSantaGroup?.Users" PagerPosition="PagerPosition.Bottom" AllowPaging="true" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="UserResponse" Width="5px" Property="Username" Title="Username"/>
            <RadzenDataGridColumn TItem="UserResponse" Width="1px">
                <Template Context="user">
                    <button type="button" class="btn btn-danger text-end" @onclick="() => RemoveUser(user)">Remove</button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <ConfirmationModal
        @ref="_addUserModal"
        Id="addUserModal"
        OnConfirmationClosed="AddUserModalClosed">
        <ModalBody>
            <div class="row my-2">
                <div class="col-md-9 form-group">
                    <label class="form-label">User</label>
                    <InputSelect class="form-select" @bind-Value="UserToAddId">
                        <option value="">Select a user...</option>
                        @foreach (var user in _availableUsers ?? new List<UserResponse>())
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </ModalBody>
    </ConfirmationModal>
    <ConfirmationModal
        @ref="_removeUserConfirmationModal"
        Title="Remove User?"
        Id="removeUserConfirmationModal"
        OnConfirmationClosed="RemoveConfirmationModalClosed">
        <ModalBody>
            <p>Are you sure you want to remove this user?</p>
        </ModalBody>
    </ConfirmationModal>
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    private SecretSantaGroupResponse? _secretSantaGroup;
    private UserResponse[]? _allUsers;

    private List<UserResponse>? _availableUsers;

    private RadzenDataGrid<UserResponse>? _grid;
    private ConfirmationModal? _addUserModal;
    private ConfirmationModal? _removeUserConfirmationModal;

    private UserResponse? _userToAdd;

    private ulong? UserToAddId
    {
        get => _userToAdd?.Id;
        set
        {
            if (value == null)
            {
                _userToAdd = null;
            }
            else
            {
                _userToAdd = _availableUsers?.FirstOrDefault((u) => u.Id == value);
            }
        }
    }
    
    private UserResponse? _userToRemove;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _secretSantaGroup = await ApiService.SecretSantaService.Get(Id);
            _allUsers = await ApiService.GetUsers();
            _availableUsers = _allUsers.Except(_secretSantaGroup.Users).ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to initialize. {ex.Message}");
        }
    }

    private async Task AddUser()
    {
        if (_addUserModal != null)
        {
            await _addUserModal.ShowModal();
        }
    }

    private async Task RemoveUser(UserResponse user)
    {
        _userToRemove = user;
        if (_removeUserConfirmationModal != null)
        {
            await _removeUserConfirmationModal.ShowModal();
        }
    }

    private async Task RemoveConfirmationModalClosed(bool confirmed)
    {
        try
        {
            if (!confirmed || _userToRemove == null || _secretSantaGroup == null)
            {
                return;
            }
            
            await ApiService.SecretSantaService.RemoveUserFromGroup(_secretSantaGroup.Id, _userToRemove.Id);
            _availableUsers?.Add(_userToRemove);
            ToastService.ShowSuccess("Successfully removed user");
            if (_secretSantaGroup != null && _userToRemove != null)
            {
                _secretSantaGroup.Users.Remove(_userToRemove);
            }
            if (_grid != null)
            {
                await _grid.Reload();
            }
            _userToRemove = null;
        }
        catch (Exception e)
        {
            ToastService.ShowError(e.Message);
        }
    }

    private async Task AddUserModalClosed(bool confirmed)
    {
        try
        {
            if (!confirmed || _userToAdd == null)
            {
                _userToAdd = null;
                return;
            }

            var updatedSecretSantaGroup = await ApiService.SecretSantaService.AddUserToGroup(Id, _userToAdd);
            _secretSantaGroup = updatedSecretSantaGroup;
            ToastService.ShowSuccess("Successfully added user");
            if (_grid != null)
            {
                await _grid.Reload();
            }
            _availableUsers?.Remove(_userToAdd);
            _userToAdd = null;
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Failed to add user. {e.Message}");
        }
    }

    private async Task GeneratePairs()
    {
        try
        {
            if (_secretSantaGroup != null)
            {
                await ApiService.SecretSantaService.GeneratePairs(_secretSantaGroup.Id);
            }
        }
        catch (Exception e)
        {
            ToastService.ShowError("Failed to generate pairs");
        }
    }
}