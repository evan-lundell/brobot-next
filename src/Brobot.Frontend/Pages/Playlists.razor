@page "/playlists"
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_playlists == null)
{
    <p><em>Loading</em></p>
}
else
{
    <h3>Playlists</h3>
    <div class="row my-3">
        <div class="offset-xs-6 offset-lg-9 col-xs-6 col-lg-3 text-end">
            <button type="button" class="btn btn-primary" @onclick="NewPlaylist">New Playlist</button>
        </div>
    </div>
    <RadzenDataGrid class="my-3" @ref="_grid" TItem="PlaylistResponse" Data="@_playlists" PagerPosition="PagerPosition.Bottom" AllowPaging="true" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="PlaylistResponse" Property="Name" Title="Name" Width="300px" />
            <RadzenDataGridColumn TItem="PlaylistResponse" Width="100px" TextAlign="TextAlign.Right">
                <Template Context="playlist">
                    <div class="align-items-end">
                        <button type="button" class="btn btn-primary" @onclick="() => ViewOrEditPlaylist(playlist)">View/Edit</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeletePlaylist(playlist)">Delete</button>
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <FormModal 
        @ref="_newPlaylistModal" 
        OnValidSubmit="SubmitNewPlaylist" 
        Id="newPlaylistModal" 
        Title="New Playlist"
        Model="@_newPlaylistRequest">
        <ModalBody>
            <div class="row">
                <div class="col-12">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="_newPlaylistRequest.Name"></InputText>
                </div>
            </div>
        </ModalBody>
    </FormModal>
    <ConfirmationModal
        @ref="_playlistDeleteConfirmationModal"
        Title="Delete Playlist?"
        Id="playlistDeleteConfirmationModal"
        OnConfirmationClosed="DeleteConfirmationModalClosed">
        <ModalBody>
            <p>Are you sure you want to delete this playlist?</p>
        </ModalBody>
    </ConfirmationModal>
}

@code {
    private List<PlaylistResponse>? _playlists;
    private RadzenDataGrid<PlaylistResponse>? _grid;
    private FormModal? _newPlaylistModal;
    private ConfirmationModal? _playlistDeleteConfirmationModal;
    private PlaylistResponse? _playlistToDelete;

    private readonly PlaylistRequest _newPlaylistRequest = new()
    {
        Id = null,
        Name = "",
        Songs = Array.Empty<PlaylistSongResponse>()
    };
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _playlists = (await ApiService.GetPlaylists()).ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to initialize. {ex.Message}");
        }
    }

    private void ViewOrEditPlaylist(PlaylistResponse playlist)
    {
        NavigationManager.NavigateTo($"/playlists/{playlist.Id}");
    }

    private async Task DeletePlaylist(PlaylistResponse playlist)
    {
        if (_playlistDeleteConfirmationModal != null)
        {
            await _playlistDeleteConfirmationModal.ShowModal();
            _playlistToDelete = playlist;
        }
    }

    private async Task NewPlaylist()
    {
        if (_newPlaylistModal != null)
        {
            await _newPlaylistModal.ShowModal();
        }
    }

    private async Task SubmitNewPlaylist()
    {
        try
        {
            var newPlaylist = await ApiService.CreatePlaylist(_newPlaylistRequest);
            _playlists?.Add(newPlaylist);
            if (_grid != null)
            {
                await _grid.Reload();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save playlist. {ex.Message}");
        }
        
        ToastService.ShowSuccess("Successfully saved playlist");
        if (_newPlaylistModal != null)
        {
            await _newPlaylistModal.HideModal();
        }
    }

    private async Task DeleteConfirmationModalClosed(bool confirmed)
    {
        try
        {
            if (confirmed && _playlistToDelete != null)
            {
                await ApiService.DeletePlaylist(_playlistToDelete.Id);
                _playlists?.Remove(_playlistToDelete);
            }
            _playlistToDelete = null;
            if (_grid != null)
            {
                await _grid.Reload();
            }
            ToastService.ShowSuccess("Successfully deleted playlist");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to delete playlist. {ex.Message}");
        }
    }
}
