@inject ApiService Api
@inject NavigationManager NavigationManager
@inject JwtAuthenticationStateProvider JwtAuthenticationStateProvider

<div>
    <h1>Login</h1>
</div>

<EditForm class="my-3" Model="@_loginRequest" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (_errorMessage.Length > 0)
    {
        <div class="row">
            <div class="col-lg-3">
                <em style="color: red">@_errorMessage</em>
            </div>
        </div>
    }
    <div class="row my-3">
        <div class="form-group col-lg-6">
            <label class="form-label">Email</label>
            <InputText @bind-Value="_loginRequest.Email" class="form-control" type="email" />
        </div>
    </div>
    <div class="row my-3">
        <div class="form-group col-lg-6">
            <label class="form-label">Password</label>
            <InputText @bind-Value="_loginRequest.Password" type="password" class="form-control" />
        </div>
    </div>
    <div class="row my-3">
        <div class="form-group col-lg-3 offset-lg-3">
            <button disabled="@_loading" class="btn btn-primary form-control">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
        </div>
    </div>
    </EditForm>
    <div class="row">
        <div class="col-lg-3 offset-lg-3">Don't have a login? Register <a href="/register">here</a></div>
    </div>

@code {
    private LoginRequest _loginRequest = new LoginRequest
    {
        Email = "",
        Password = ""
    };
    private bool _loading;
    private string _errorMessage = "";
    private const string GenericMessage = "Unable to login. Please try again";

    private async Task OnValidSubmit()
    {
        _loading = true;
        try
        {
            var loginResponse = await Api.Login(_loginRequest);
            if (loginResponse?.Token != null)
            {
                JwtAuthenticationStateProvider.Login(loginResponse.Token);
                Console.WriteLine("Successfully logged in!");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = GenericMessage;
            }
            _loading = false;
        }
        catch (Exception ex)
        {
            _errorMessage = GenericMessage;
            Console.WriteLine(ex.Message);
            _loading = false;
        }
    }
}