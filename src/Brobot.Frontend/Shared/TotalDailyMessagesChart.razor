@inject ApiService ApiService
@inject IToastService ToastService
@inherits DashboardGraphBase

@if (_messageCountData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="p-3">
        <div class="row">
            <div class="col-12">
                <h3>Daily Message Count (All Users)</h3>
            </div>
        </div>
        <div class="row my-3">
            <div class="col-12">
                <label class="form-label">Channel</label>
                <select class="form-select" @onchange="OnChannelChange">
                    <option value="">All</option>
                    @foreach (var channel in Channels ?? [])
                    {
                        <option value="@channel.Id">@channel.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 my-5">
                <RadzenChart @ref="_chart">
                    <RadzenLegend Visible="false"></RadzenLegend>
                    <RadzenLineSeries Title="Message Count" Data="@_messageCountData" CategoryProperty="CountDate" LineType="LineType.Solid" ValueProperty="MessageCount">
                        <RadzenMarkers MarkerType="MarkerType.Circle"></RadzenMarkers>
                    </RadzenLineSeries>
                    <RadzenValueAxis>
                        <RadzenAxisTitle Text="Message Count"/>
                    </RadzenValueAxis>
                    <RadzenCategoryAxis>
                        <RadzenAxisTitle Text="Days" />
                    </RadzenCategoryAxis>
                </RadzenChart>
            </div>
        </div>
    </div>
}

@code {
    private DailyMessageCountResponse[]? _messageCountData;

    private readonly Dictionary<ulong, DailyMessageCountResponse[]> _messageCountCache = new();

    private RadzenChart? _chart;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _messageCountData = await ApiService.GetTotalDailyMessageCount();
            _messageCountCache.Add(0, _messageCountData);
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task OnChannelChange(ChangeEventArgs eventArgs)
    {
        if (!ulong.TryParse(eventArgs.Value?.ToString(), out var channelId))
        {
            if (_messageCountCache.TryGetValue(0, out var value))
            {
                _messageCountData = value;
            }
            else
            {
                _messageCountData = await ApiService.GetTotalDailyMessageCount();
                _messageCountCache.Add(0, _messageCountData);
            }
        }
        else
        {
            if (_messageCountCache.TryGetValue(channelId, out var value))
            {
                _messageCountData = value;
            }
            else
            {
                _messageCountData = await ApiService.GetTotalDailyMessageCount(channelId);
                _messageCountCache.Add(channelId, _messageCountData);
            }
        }

        if (_chart != null)
        {
            await _chart.Reload();
        }
    }
}