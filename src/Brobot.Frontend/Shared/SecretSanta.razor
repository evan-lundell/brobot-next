@inject ApiService ApiService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inherits LoadableComponentBase

<h3>SecretSanta</h3>
<div class="row my-2">
    <div class="offset-xs-6 offset-lg-9 col-xs-6 col-lg-3 text-end">
        <button type="button" class="btn btn-primary" @onclick="NewSecretSantaGroup">New Group</button>
    </div>
</div>
<RadzenDataGrid class="my-3" @ref="_grid" TItem="SecretSantaGroupResponse" Data="@_secretSantaGroups" PagerPosition="PagerPosition.Bottom" AllowPaging="true" AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="SecretSantaGroupResponse" Property="Name" Title="Name" Width="300px"/>
        <RadzenDataGridColumn TItem="SecretSantaGroupResponse" Width="100px" TextAlign="TextAlign.Right">
            <Template Context="group">
                <div class="align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="() => ViewOrEditSecretSantaGroup(group)">View/Edit</button>
                    <button type="button" class="btn btn-primary" @onclick="() => DeleteSecretSantaGroup(group)">Delete</button>
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
<FormModal
    Id="newSecretSantaGroupModal"
    @ref="_newSecretSantaGroupModal"
    OnValidSubmit="SubmitNewSecretSantaGroup"
    Title="New Secret Santa Group"
    Model="@_newSecretSantaGroupRequest">
    <ModalBody>
        <div class="row">
            <div class="col-12">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_newSecretSantaGroupRequest.Name"></InputText>
            </div>
        </div>
    </ModalBody>
</FormModal>
<ConfirmationModal
    @ref="_secretSantaDeleteConfirmationModal"
    Title="Delete Secret Santa Group?"
    Id="secretSantaGroupDeleteConfirmationModal"
    OnConfirmationClosed="DeleteConfirmationModalClosed"/>

@code {
    private List<SecretSantaGroupResponse>? _secretSantaGroups;

    private FormModal? _newSecretSantaGroupModal;
    private ConfirmationModal? _secretSantaDeleteConfirmationModal;
    private RadzenDataGrid<SecretSantaGroupResponse>? _grid;

    private SecretSantaGroupRequest _newSecretSantaGroupRequest = new ()
    {
        Name = String.Empty,
        Users = new List<UserResponse>()
    };

    private SecretSantaGroupResponse? _groupToDelete;

    protected override async Task OnInitializedAsync()
    {
        _secretSantaGroups = (await ApiService.SecretSantaService.GetAll()).ToList();
        await UpdateLoaded(true);
    }

    private void ViewOrEditSecretSantaGroup(SecretSantaGroupResponse secretSantaGroup)
    {
        NavigationManager.NavigateTo($"/secretsanta/{secretSantaGroup.Id}");
    }

    private async Task NewSecretSantaGroup()
    {
        if (_newSecretSantaGroupModal != null)
        {
            await _newSecretSantaGroupModal.ShowModal();
        }
    }

    private async Task SubmitNewSecretSantaGroup()
    {
        try
        {
            var newGroup = await ApiService.SecretSantaService.Create(_newSecretSantaGroupRequest);
            _secretSantaGroups?.Add(newGroup);
            if (_grid != null)
            {
                await _grid.Reload();
            }
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Failed to save group. {e.Message}");
        }
    }

    private async Task DeleteSecretSantaGroup(SecretSantaGroupResponse secretSantaGroup)
    {
        if (_secretSantaDeleteConfirmationModal != null)
        {
            await _secretSantaDeleteConfirmationModal.ShowModal();
            _groupToDelete = secretSantaGroup;
        }
    }

    private async Task DeleteConfirmationModalClosed(bool confirmed)
    {
        try
        {
            if (confirmed && _groupToDelete != null)
            {
                await ApiService.SecretSantaService.Delete(_groupToDelete.Id);
                _secretSantaGroups?.Remove(_groupToDelete);
            }
            _groupToDelete = null;
            if (_grid != null)
            {
                await _grid.Reload();
            }
            ToastService.ShowSuccess("Successfully deleted group");
        }
        catch (Exception e)
        {
            ToastService.ShowError($"Failed to delete group. {e.Message}");
        }
    }
}